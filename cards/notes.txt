[Basic Go Types]

- bool, string, int, float64

[Variabe declaration examples]

var card string = "Ace of Spades"
card := "Ace of Spades"

- In the first example we explicitly said that var is of type string
- Second example uses ":=" which tells Go compiler to figure out which type to assign
- ":=" is only used when defining a new variable
- If we are reassigning the value of existing variable, we don't have to use :=
- We can initialize a variable outside of a function, but we can't assign the value to it
- Variables must first be initialized with the ':=' operator or the 'var variableName type' syntax

[RETURN TYPE]

- Every function that returns something must have explicitly stated return type
- Example of a function that returns a string:
func newCard() string {
	return "Five of Diamonds"
}

- To call a function inside the package it was created just write "nameOfFunction()"

[DATA STRUCTURES]
1. Array -> fixed length list of things
2. Slice -> an array that can grow or shrink
- Both structures must be defined with a data type

- Declaring a slice and appending new element:
	cards := []string{"Ace of Diamonds", newCard()}
	cards = append(cards, "Six of Spades")

- Looping through an array or slice:
	for i, card := range cards {
		fmt.Println(i, card)
	}
    - i = current index
    - card = current card
    - range cards = tells go to loop over the slice or array
    - we use := in for statement to throw out the old index and element and redeclare new ones
    - every variable we declare in for loop must be used, if we don't print index in this case it's going to throw a syntax error

[BYTE SLICE]
- Byte slice is a computer-friendly representation of a string
- String to byte slice:
	greeting := "Hi there!"
	fmt.Println([]byte(greeting))

[ERRORS]
- a value of type 'error' will have nil if nothing went wrong
- example error if we try to load a file that does not existing:
"Open yourfilename: no such file or directory
exit status 1"

[TESTING WITH GO]
- To make a test create a new file ending in _test.go
- To run all tests in a package, run the "go test" command
- Inside the test file make functions that start with word Test eg. TestNewDeck, TestSaveToDeckAndNewDeckFromFile
- Example function "func TestSaveToDeckAndNewDeckFromFile(t *testing.T)"
	- parameter "t *testing.T" is a must in unit tests and serves to handle errors and logging
	- for example function "t.Errorf" is handling an error with a formatted string we provide